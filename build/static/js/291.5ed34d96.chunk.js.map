{"version":3,"file":"static/js/291.5ed34d96.chunk.js","mappings":"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","sources":["Screens/dashboard/cord/AdminMessage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"./AdminMessage.css\";\r\nimport axios from \"axios\";\r\n\r\naxios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\r\naxios.defaults.withCredentials = true;\r\naxios.defaults.crossDomain = true;\r\n\r\nfunction AdminMessage() {\r\n  const [formData, setFormData] = useState({\r\n    role: \"student\",\r\n    customOption: \"\",\r\n  });\r\n\r\n  const [users, setUsers] = useState([]);\r\n  const [chatMessages, setChatMessages] = useState([]);\r\n  const [currentMessage, setCurrentMessage] = useState(\"\");\r\n  const [chatVisible, setChatVisible] = useState(false);\r\n  const [selectedUserId, setSelectedUserId] = useState(null);\r\n  const [selectedUserRole, setSelectedUserRole] = useState(null);\r\n  const [previousMessages, setPreviousMessages] = useState([]);\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n    if (name === \"customOption\") {\r\n      const selectedUser = users.find((user) => user.name === value);\r\n      setSelectedUserId(selectedUser ? selectedUser.id : null);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // Fetching previous chat messages\r\n    const fetchPreviousMessages = async () => {\r\n      if (!selectedUserId) return; // Exit if there's no selected user\r\n\r\n      const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n      };\r\n\r\n      const prevSubmitData = {\r\n        chat_to_user_id: localStorage.getItem(\"id\"),\r\n        chat_from_user_id: selectedUserId,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          \"https://rxk4239.uta.cloud/test_chatto.php\",\r\n          prevSubmitData,\r\n          {\r\n            headers: headers,\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        if (\r\n          response.data &&\r\n          response.data.status === \"success\" &&\r\n          Array.isArray(response.data.messages) // Check if messages array exists\r\n        ) {\r\n          console.log(\r\n            `Previous messages for user ${selectedUserId}:`,\r\n            response.data.messages\r\n          );\r\n          setPreviousMessages(response.data.messages);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during the Axios request:\", error);\r\n      }\r\n    };\r\n\r\n    fetchPreviousMessages();\r\n  }, [selectedUserId]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const role = formData.role;\r\n      setSelectedUserRole(role);\r\n      const headers = {\r\n        \"Content-Type\": \"application/json\",\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          \"https://rxk4239.uta.cloud/test_getformdata.php\",\r\n          { role },\r\n          {\r\n            headers: headers,\r\n            withCredentials: true,\r\n          }\r\n        );\r\n\r\n        if (\r\n          response.data &&\r\n          response.data.status === \"success\" &&\r\n          Array.isArray(response.data.users)\r\n        ) {\r\n          setUsers(response.data.users);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error during the Axios request:\", error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [formData]);\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setChatVisible(true);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    if (selectedUserId && currentMessage) {\r\n      const newMessage = {\r\n        userId: selectedUserId,\r\n        message: currentMessage,\r\n      };\r\n      setChatMessages([...chatMessages, newMessage]);\r\n\r\n      try {\r\n        // Making the axios.post request as per the requirement\r\n        const postData = {\r\n          chat_from_user_id: localStorage.getItem(\"id\"),\r\n          chat_to_user_id: selectedUserId,\r\n          chat_from_user_role: localStorage.getItem(\"user\"),\r\n          chat_to_user_role: selectedUserRole,\r\n          chat_message: currentMessage,\r\n        };\r\n        const headers = {\r\n          \"Content-Type\": \"application/json\",\r\n        };\r\n\r\n        try {\r\n          const response = await axios.post(\r\n            \"https://rxk4239.uta.cloud/test_chatfrom.php\",\r\n            postData,\r\n            {\r\n              headers: headers,\r\n              withCredentials: true,\r\n            }\r\n          );\r\n\r\n          if (\r\n            response.data &&\r\n            response.data.status === \"success\" &&\r\n            Array.isArray(response.data.users)\r\n          ) {\r\n            setUsers(response.data.users);\r\n          }\r\n        } catch (error) {\r\n          console.error(\"Error during the Axios request:\", error);\r\n        }\r\n\r\n        // You can handle the response or errors as needed\r\n        // if (response.data.success) {\r\n        //   console.log(\"Message sent successfully\");\r\n        // } else {\r\n        //   console.error(\"Error sending message:\", response.data.error);\r\n        // }\r\n      } catch (error) {\r\n        console.error(\"Error during the Axios request:\", error);\r\n      }\r\n\r\n      setCurrentMessage(\"\");\r\n    } else {\r\n      console.log(\"No user selected or no message entered\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n        <h1>Admin Message</h1>\r\n        <div className=\"AdminMessage\">\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"select-container\">\r\n              <label>Role:</label>\r\n              <select\r\n                name=\"role\"\r\n                value={formData.role}\r\n                onChange={handleInputChange}\r\n              >\r\n                <option value=\"student\">Student</option>\r\n                <option value=\"admin\">Admin</option>\r\n                <option value=\"quality-admin\">QA Officer</option>\r\n                <option value=\"cord\">Co-ordinator</option>\r\n                <option value=\"faculty\">Faculty</option>\r\n              </select>\r\n            </div>\r\n            <div className=\"select-container\">\r\n              <label>Custom:</label>\r\n              <select\r\n                name=\"customOption\"\r\n                value={formData.customOption}\r\n                onChange={handleInputChange}\r\n              >\r\n                <option value=\"\">Select...</option>\r\n                {users.map((user) => (\r\n                  <option key={user.id} value={user.name}>\r\n                    {user.name}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n            <div className=\"select-container\">\r\n              <button type=\"submit\">Start Chat</button>\r\n            </div>\r\n          </form>\r\n          {chatVisible && (\r\n            <div\r\n              className=\"chatbot-container\"\r\n              style={{\r\n                position: \"fixed\",\r\n                bottom: \"10px\",\r\n                right: \"10px\",\r\n                width: \"300px\",\r\n                background: \"#f9f9f9\",\r\n                boxShadow: \"0 0 10px rgba(0, 0, 0, 0.2)\",\r\n                borderRadius: \"8px\",\r\n                overflow: \"hidden\",\r\n              }}\r\n            >\r\n              <div\r\n                className=\"chat-header\"\r\n                style={{\r\n                  padding: \"10px 20px\",\r\n                  backgroundColor: \"#007BFF\",\r\n                  color: \"white\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                Chatbot\r\n                <button\r\n                  onClick={() => setChatVisible(false)}\r\n                  style={{\r\n                    background: \"transparent\",\r\n                    border: \"none\",\r\n                    color: \"white\",\r\n                    fontSize: \"20px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  ×\r\n                </button>\r\n              </div>\r\n              <div\r\n                className=\"chat-container\"\r\n                style={{\r\n                  maxHeight: \"200px\",\r\n                  overflowY: \"scroll\",\r\n                  padding: \"10px\",\r\n                  borderBottom: \"1px solid #ddd\",\r\n                }}\r\n              >\r\n                              {previousMessages.map((msg, index) => {\r\n                const isCurrentUser = localStorage.getItem('id') === msg.sender;\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    className=\"previous-message\"\r\n                    style={{\r\n                      padding: \"8px 12px\",\r\n                      borderBottom: \"1px solid #eee\",\r\n                      textAlign: \"left\",\r\n                      backgroundColor: isCurrentUser ? \"#007BFF\" : \"white\",\r\n                      color: isCurrentUser ? \"white\" : \"black\",\r\n                      borderRadius: \"8px\",\r\n                      margin: \"8px\",\r\n                      maxWidth: \"70%\",\r\n                      float: isCurrentUser ? \"right\" : \"left\",\r\n                      clear: \"both\", // Add this property\r\n                    }}\r\n                  >\r\n                    <strong>{isCurrentUser ? localStorage.getItem('first_name') : selectedUserRole}:</strong> {msg.message}\r\n                  </div>\r\n                );\r\n              })}\r\n\r\n              {chatMessages.map((msg, index) => {\r\n                const isCurrentUser = !(localStorage.getItem('id') === msg.sender);\r\n                return (\r\n                  <div\r\n                    key={index}\r\n                    style={{\r\n                      padding: \"8px 12px\",\r\n                      borderBottom: \"1px solid #eee\",\r\n                      textAlign: \"left\",\r\n                      backgroundColor: isCurrentUser ? \"#007BFF\" : \"white\",\r\n                      color: isCurrentUser ? \"white\" : \"black\",\r\n                      borderRadius: \"8px\",\r\n                      margin: \"8px\",\r\n                      maxWidth: \"70%\",\r\n                      float: isCurrentUser ? \"right\" : \"left\",\r\n                      clear: \"both\", // Add this property\r\n                    }}\r\n                  >\r\n                    <strong>{isCurrentUser ? localStorage.getItem('first_name') : selectedUserRole}:</strong> {msg.message}\r\n                  </div>\r\n                );\r\n              })}\r\n              </div>\r\n              <div\r\n                className=\"chat-input-container\"\r\n                style={{\r\n                  padding: \"10px\",\r\n                  borderTop: \"1px solid #ddd\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                }}\r\n              >\r\n                <input\r\n                  type=\"text\"\r\n                  value={currentMessage}\r\n                  onChange={(e) => setCurrentMessage(e.target.value)}\r\n                  placeholder=\"Enter your message...\"\r\n                  style={{\r\n                    padding: \"10px\",\r\n                    flexGrow: \"1\",\r\n                    marginRight: \"10px\",\r\n                    borderRadius: \"4px\",\r\n                    border: \"1px solid #ddd\",\r\n                  }}\r\n                />\r\n                <button\r\n                  onClick={handleSendMessage}\r\n                  style={{\r\n                    padding: \"10px 15px\",\r\n                    backgroundColor: \"#007BFF\",\r\n                    color: \"white\",\r\n                    border: \"none\",\r\n                    borderRadius: \"4px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                >\r\n                  Send\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default AdminMessage;"],"names":["axios","defaults","headers","post","withCredentials","crossDomain","_useState","useState","role","customOption","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","users","setUsers","_useState5","_useState6","chatMessages","setChatMessages","_useState7","_useState8","currentMessage","setCurrentMessage","_useState9","_useState10","chatVisible","setChatVisible","_useState11","_useState12","selectedUserId","setSelectedUserId","_useState13","_useState14","selectedUserRole","setSelectedUserRole","_useState15","_useState16","previousMessages","setPreviousMessages","handleInputChange","event","_event$target","target","name","value","prevState","_objectSpread","_defineProperty","selectedUser","find","user","id","useEffect","fetchPreviousMessages","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","prevSubmitData","response","wrap","_context","prev","next","abrupt","chat_to_user_id","localStorage","getItem","chat_from_user_id","sent","data","status","Array","isArray","messages","console","log","concat","t0","error","stop","apply","arguments","fetchData","_ref2","_callee2","_context2","handleSendMessage","_ref3","_callee3","newMessage","postData","_context3","userId","message","_toConsumableArray","chat_from_user_role","chat_to_user_role","chat_message","t1","_jsxs","children","_jsx","className","onSubmit","preventDefault","onChange","map","type","style","position","bottom","right","width","background","boxShadow","borderRadius","overflow","padding","backgroundColor","color","display","justifyContent","alignItems","onClick","border","fontSize","cursor","maxHeight","overflowY","borderBottom","msg","index","isCurrentUser","sender","textAlign","margin","maxWidth","float","clear","borderTop","e","placeholder","flexGrow","marginRight"],"sourceRoot":""}